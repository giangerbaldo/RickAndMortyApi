// Generated by Dagger (https://google.github.io/dagger).
package com.rickandmortyapi.di;

import android.app.Application;
import com.rickandmortyapi.data.local.AppDatabase;
import com.rickandmortyapi.data.local.dao.CharacterDao;
import com.rickandmortyapi.data.local.dao.LocationDao;
import com.rickandmortyapi.data.remote.RickAndMortyAPIService;
import com.rickandmortyapi.data.repository.CharacterRepository;
import com.rickandmortyapi.data.repository.LocationRepository;
import com.rickandmortyapi.ui.characterDetail.CharacterDetailFragment;
import com.rickandmortyapi.ui.characterDetail.CharacterDetailFragment_MembersInjector;
import com.rickandmortyapi.ui.characterDetail.CharacterDetailViewModelFactory;
import com.rickandmortyapi.ui.home.HomeFragment;
import com.rickandmortyapi.ui.home.HomeFragment_MembersInjector;
import com.rickandmortyapi.ui.home.HomeViewModelFactory;
import com.squareup.moshi.Moshi;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Application> providesApplicationProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<Moshi> providesMoshiProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<RickAndMortyAPIService> providesApiServiceProvider;

  private Provider<AppDatabase> providesRickAndMortyDatabaseProvider;

  private Provider<CharacterDao> providesCharacterDaoProvider;

  private Provider<LocationDao> providesLocationDaoProvider;

  private Provider<LocationRepository> providesLocationRepositoryProvider;

  private Provider<CharacterRepository> providesCharacterRepositoryProvider;

  private DaggerAppComponent(Builder builder) {

    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.providesApplicationProvider =
        DoubleCheck.provider(AppModules_ProvidesApplicationFactory.create(builder.appModules));
    this.providesOkHttpClientProvider =
        DoubleCheck.provider(
            NetModule_ProvidesOkHttpClientFactory.create(
                builder.netModule, providesApplicationProvider));
    this.providesMoshiProvider =
        DoubleCheck.provider(NetModule_ProvidesMoshiFactory.create(builder.netModule));
    this.providesRetrofitProvider =
        DoubleCheck.provider(
            NetModule_ProvidesRetrofitFactory.create(
                builder.netModule, providesOkHttpClientProvider, providesMoshiProvider));
    this.providesApiServiceProvider =
        DoubleCheck.provider(
            NetModule_ProvidesApiServiceFactory.create(
                builder.netModule, providesRetrofitProvider));
    this.providesRickAndMortyDatabaseProvider =
        DoubleCheck.provider(
            AppModules_ProvidesRickAndMortyDatabaseFactory.create(builder.appModules));
    this.providesCharacterDaoProvider =
        DoubleCheck.provider(
            AppModules_ProvidesCharacterDaoFactory.create(
                builder.appModules, providesRickAndMortyDatabaseProvider));
    this.providesLocationDaoProvider =
        DoubleCheck.provider(
            AppModules_ProvidesLocationDaoFactory.create(
                builder.appModules, providesRickAndMortyDatabaseProvider));
    this.providesLocationRepositoryProvider =
        DoubleCheck.provider(
            AppModules_ProvidesLocationRepositoryFactory.create(
                builder.appModules, providesLocationDaoProvider));
    this.providesCharacterRepositoryProvider =
        DoubleCheck.provider(
            AppModules_ProvidesCharacterRepositoryFactory.create(
                builder.appModules,
                providesApiServiceProvider,
                providesCharacterDaoProvider,
                providesLocationRepositoryProvider));
  }

  @Override
  public HomeComponent plus(HomeModule module) {
    return new HomeComponentImpl(module);
  }

  @Override
  public CharacterDetailComponent plus(CharacterDetailModule module) {
    return new CharacterDetailComponentImpl(module);
  }

  public static final class Builder {
    private AppModules appModules;

    private NetModule netModule;

    private Builder() {}

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModules, AppModules.class);
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder netModule(NetModule netModule) {
      this.netModule = Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder appModules(AppModules appModules) {
      this.appModules = Preconditions.checkNotNull(appModules);
      return this;
    }
  }

  private final class HomeComponentImpl implements HomeComponent {
    private HomeComponentImpl(HomeModule module) {}

    private HomeViewModelFactory getHomeViewModelFactory() {
      return new HomeViewModelFactory(
          DaggerAppComponent.this.providesCharacterRepositoryProvider.get());
    }

    @Override
    public void inject(HomeFragment fragment) {
      injectHomeFragment(fragment);
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      HomeFragment_MembersInjector.injectHomeViewModelFactory(instance, getHomeViewModelFactory());
      return instance;
    }
  }

  private final class CharacterDetailComponentImpl implements CharacterDetailComponent {
    private CharacterDetailComponentImpl(CharacterDetailModule module) {}

    private CharacterDetailViewModelFactory getCharacterDetailViewModelFactory() {
      return new CharacterDetailViewModelFactory(
          DaggerAppComponent.this.providesCharacterRepositoryProvider.get());
    }

    @Override
    public void inject(CharacterDetailFragment fragment) {
      injectCharacterDetailFragment(fragment);
    }

    private CharacterDetailFragment injectCharacterDetailFragment(
        CharacterDetailFragment instance) {
      CharacterDetailFragment_MembersInjector.injectCharDetailViewModelFactory(
          instance, getCharacterDetailViewModelFactory());
      return instance;
    }
  }
}
