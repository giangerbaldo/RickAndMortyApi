// Generated by Dagger (https://google.github.io/dagger).
package com.rickandmortyapi.di;

import com.rickandmortyapi.data.local.AppDatabase;
import com.rickandmortyapi.data.local.dao.LocationDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModules_ProvidesLocationDaoFactory implements Factory<LocationDao> {
  private final AppModules module;

  private final Provider<AppDatabase> databaseProvider;

  public AppModules_ProvidesLocationDaoFactory(
      AppModules module, Provider<AppDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public LocationDao get() {
    return provideInstance(module, databaseProvider);
  }

  public static LocationDao provideInstance(
      AppModules module, Provider<AppDatabase> databaseProvider) {
    return proxyProvidesLocationDao(module, databaseProvider.get());
  }

  public static AppModules_ProvidesLocationDaoFactory create(
      AppModules module, Provider<AppDatabase> databaseProvider) {
    return new AppModules_ProvidesLocationDaoFactory(module, databaseProvider);
  }

  public static LocationDao proxyProvidesLocationDao(AppModules instance, AppDatabase database) {
    return Preconditions.checkNotNull(
        instance.providesLocationDao(database),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
