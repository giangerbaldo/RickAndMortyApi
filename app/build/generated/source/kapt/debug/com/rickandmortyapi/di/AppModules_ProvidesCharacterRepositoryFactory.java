// Generated by Dagger (https://google.github.io/dagger).
package com.rickandmortyapi.di;

import com.rickandmortyapi.data.local.dao.CharacterDao;
import com.rickandmortyapi.data.remote.RickAndMortyAPIService;
import com.rickandmortyapi.data.repository.CharacterRepository;
import com.rickandmortyapi.data.repository.LocationRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModules_ProvidesCharacterRepositoryFactory
    implements Factory<CharacterRepository> {
  private final AppModules module;

  private final Provider<RickAndMortyAPIService> apiProvider;

  private final Provider<CharacterDao> daoProvider;

  private final Provider<LocationRepository> locationRepositoryProvider;

  public AppModules_ProvidesCharacterRepositoryFactory(
      AppModules module,
      Provider<RickAndMortyAPIService> apiProvider,
      Provider<CharacterDao> daoProvider,
      Provider<LocationRepository> locationRepositoryProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
    this.daoProvider = daoProvider;
    this.locationRepositoryProvider = locationRepositoryProvider;
  }

  @Override
  public CharacterRepository get() {
    return provideInstance(module, apiProvider, daoProvider, locationRepositoryProvider);
  }

  public static CharacterRepository provideInstance(
      AppModules module,
      Provider<RickAndMortyAPIService> apiProvider,
      Provider<CharacterDao> daoProvider,
      Provider<LocationRepository> locationRepositoryProvider) {
    return proxyProvidesCharacterRepository(
        module, apiProvider.get(), daoProvider.get(), locationRepositoryProvider.get());
  }

  public static AppModules_ProvidesCharacterRepositoryFactory create(
      AppModules module,
      Provider<RickAndMortyAPIService> apiProvider,
      Provider<CharacterDao> daoProvider,
      Provider<LocationRepository> locationRepositoryProvider) {
    return new AppModules_ProvidesCharacterRepositoryFactory(
        module, apiProvider, daoProvider, locationRepositoryProvider);
  }

  public static CharacterRepository proxyProvidesCharacterRepository(
      AppModules instance,
      RickAndMortyAPIService api,
      CharacterDao dao,
      LocationRepository locationRepository) {
    return Preconditions.checkNotNull(
        instance.providesCharacterRepository(api, dao, locationRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
