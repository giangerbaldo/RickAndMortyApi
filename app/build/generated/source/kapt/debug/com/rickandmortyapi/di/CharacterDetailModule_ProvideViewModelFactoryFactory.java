// Generated by Dagger (https://google.github.io/dagger).
package com.rickandmortyapi.di;

import androidx.lifecycle.ViewModelProvider;
import com.rickandmortyapi.data.repository.CharacterRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class CharacterDetailModule_ProvideViewModelFactoryFactory
    implements Factory<ViewModelProvider.Factory> {
  private final CharacterDetailModule module;

  private final Provider<CharacterRepository> characterRepositoryProvider;

  public CharacterDetailModule_ProvideViewModelFactoryFactory(
      CharacterDetailModule module, Provider<CharacterRepository> characterRepositoryProvider) {
    this.module = module;
    this.characterRepositoryProvider = characterRepositoryProvider;
  }

  @Override
  public ViewModelProvider.Factory get() {
    return provideInstance(module, characterRepositoryProvider);
  }

  public static ViewModelProvider.Factory provideInstance(
      CharacterDetailModule module, Provider<CharacterRepository> characterRepositoryProvider) {
    return proxyProvideViewModelFactory(module, characterRepositoryProvider.get());
  }

  public static CharacterDetailModule_ProvideViewModelFactoryFactory create(
      CharacterDetailModule module, Provider<CharacterRepository> characterRepositoryProvider) {
    return new CharacterDetailModule_ProvideViewModelFactoryFactory(
        module, characterRepositoryProvider);
  }

  public static ViewModelProvider.Factory proxyProvideViewModelFactory(
      CharacterDetailModule instance, CharacterRepository characterRepository) {
    return Preconditions.checkNotNull(
        instance.provideViewModelFactory(characterRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
