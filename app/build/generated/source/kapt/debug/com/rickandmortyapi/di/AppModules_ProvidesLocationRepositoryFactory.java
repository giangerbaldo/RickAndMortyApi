// Generated by Dagger (https://google.github.io/dagger).
package com.rickandmortyapi.di;

import com.rickandmortyapi.data.local.dao.LocationDao;
import com.rickandmortyapi.data.repository.LocationRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModules_ProvidesLocationRepositoryFactory
    implements Factory<LocationRepository> {
  private final AppModules module;

  private final Provider<LocationDao> locationDaoProvider;

  public AppModules_ProvidesLocationRepositoryFactory(
      AppModules module, Provider<LocationDao> locationDaoProvider) {
    this.module = module;
    this.locationDaoProvider = locationDaoProvider;
  }

  @Override
  public LocationRepository get() {
    return provideInstance(module, locationDaoProvider);
  }

  public static LocationRepository provideInstance(
      AppModules module, Provider<LocationDao> locationDaoProvider) {
    return proxyProvidesLocationRepository(module, locationDaoProvider.get());
  }

  public static AppModules_ProvidesLocationRepositoryFactory create(
      AppModules module, Provider<LocationDao> locationDaoProvider) {
    return new AppModules_ProvidesLocationRepositoryFactory(module, locationDaoProvider);
  }

  public static LocationRepository proxyProvidesLocationRepository(
      AppModules instance, LocationDao locationDao) {
    return Preconditions.checkNotNull(
        instance.providesLocationRepository(locationDao),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
