// Generated by Dagger (https://google.github.io/dagger).
package com.rickandmortyapi.di;

import android.app.Application;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NetModule_ProvidesOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetModule module;

  private final Provider<Application> applicationProvider;

  public NetModule_ProvidesOkHttpClientFactory(
      NetModule module, Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideInstance(module, applicationProvider);
  }

  public static OkHttpClient provideInstance(
      NetModule module, Provider<Application> applicationProvider) {
    return proxyProvidesOkHttpClient(module, applicationProvider.get());
  }

  public static NetModule_ProvidesOkHttpClientFactory create(
      NetModule module, Provider<Application> applicationProvider) {
    return new NetModule_ProvidesOkHttpClientFactory(module, applicationProvider);
  }

  public static OkHttpClient proxyProvidesOkHttpClient(
      NetModule instance, Application application) {
    return Preconditions.checkNotNull(
        instance.providesOkHttpClient(application),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
